package generator_test

import (
	"path"
	"runtime"

	. "github.com/maxbrunsfeld/counterfeiter/generator"
	"github.com/maxbrunsfeld/counterfeiter/locator"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Interface Generator", func() {
	var (
		subject          InterfaceGenerator
		fakeFileContents string
		err              error
	)

	BeforeEach(func() {
		model, _ := locator.GetFunctionsFromDirectory("os", path.Join(runtime.GOROOT(), "src/os"))

		subject = InterfaceGenerator{
			Model:                  model,
			Package:                runtime.GOROOT() + "src/os",
			DestinationPackageName: "osshim",
			DestinationInterface:   "Os",
		}
		fakeFileContents, err = subject.GenerateInterface()
	})

	It("should not fail", func() {
		Expect(err).ToNot(HaveOccurred())
	})

	It("correctly names the package", func() {
		Expect(fakeFileContents).To(ContainSubstring("package osshim"))
	})

	It("correctly names the interface", func() {
		Expect(fakeFileContents).To(ContainSubstring("type Os interface {"))
	})

	It("should produce a correct function prototype", func() {
		Expect(fakeFileContents).To(ContainSubstring("MkdirAll(path string, perm os.FileMode) error"))
	})

	It("should import the appropriate packages", func() {
		Expect(fakeFileContents).To(ContainSubstring(`"os"`))
		Expect(fakeFileContents).To(ContainSubstring(`"time"`))
	})

	It("should produce the correct file contents", func() {
		Expect(fakeFileContents).To(Equal(expectedOutput))
	})
})

const expectedOutput string = `// This file was generated by counterfeiter
package osshim

import (
	"os"
	"time"
)

type Os interface {
	FindProcess(pid int) (*os.Process, error)
	StartProcess(name string, argv []string, attr *os.ProcAttr) (*os.Process, error)
	Hostname() (name string, err error)
	Expand(s string, mapping func(string) string) string
	ExpandEnv(s string) string
	Getenv(key string) string
	LookupEnv(key string) (string, bool)
	Setenv(key, value string) error
	Unsetenv(key string) error
	Clearenv()
	Environ() []string
	NewSyscallError(syscall string, err error) error
	IsExist(err error) bool
	IsNotExist(err error) bool
	IsPermission(err error) bool
	Getpid() int
	Getppid() int
	Mkdir(name string, perm os.FileMode) error
	Chdir(dir string) error
	Open(name string) (*os.File, error)
	Create(name string) (*os.File, error)
	Rename(oldpath, newpath string) error
	NewFile(fd uintptr, name string) *os.File
	OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
	Truncate(name string, size int64) error
	Remove(name string) error
	Chmod(name string, mode os.FileMode) error
	Chtimes(name string, atime time.Time, mtime time.Time) error
	Pipe() (r *os.File, w *os.File, err error)
	Link(oldname, newname string) error
	Symlink(oldname, newname string) error
	Readlink(name string) (string, error)
	Chown(name string, uid, gid int) error
	Lchown(name string, uid, gid int) error
	TempDir() string
	Stat(name string) (os.FileInfo, error)
	Lstat(name string) (os.FileInfo, error)
	Getwd() (dir string, err error)
	MkdirAll(path string, perm os.FileMode) error
	RemoveAll(path string) error
	IsPathSeparator(c uint8) bool
	Getuid() int
	Geteuid() int
	Getgid() int
	Getegid() int
	Getgroups() ([]int, error)
	Exit(code int)
	Getpagesize() int
	SameFile(fi1, fi2 os.FileInfo) bool
}
`
